{
    // Use IntelliSense to learn about possible attributes.
    // Hover to view descriptions of existing attributes.
    // For more information, visit: https://go.microsoft.com/fwlink/?linkid=830387
    "version": "0.2.0",
    "configurations": [
        {
            "type": "java",
            "name": "ReferenceCount",
            "request": "launch",
            // "vmArgs": "-XX:+PrintGC", // simple log
            // "vmArgs": "-Xlog:gc*", // detail log
            // "vmArgs": "-XX:+PrintHeapAtGC", // 每次在GC后，都打印堆的详细信息，这个就比上面的detail更加详细了。
            // "vmArgs": "-XX:+PrintGCTimeStamps", // 每次打印GC日志的时候，还要输出时间信息(系统启动后的时间)。
            // "vmArgs": "-XX:+PrintGCApplicationConcurrentTime", // 打印应用程序的执行时间(到达安全点safepoint的时间)，一般是跟下面的参数一起使用
            // "vmArgs": "-XX:+PrintGCApplicationStoppedTime", // 输出因GC停顿的时间
            // "vmArgs": "-XX:+PrintReferenceGC", // 打印引用相关的GC，可以跟踪系统内的软引用、弱引用、虚引用和Finallize队列。
            // "vmArgs": "-Xloggc:log/gc.log", // 输出到指定log文件
            // "vmArgs":"safepoint:file=gc-%t.log:level",
            //GC类型："-XX:+UseSerialGC","-XX:+UseParallelGC","-XX:+UseG1GC","-XX:+UseZGC","-XX:+UseShenandoahGC"
            "vmArgs": ["-Xlog:gc*:log/gc-%t.log:time,level,tags","-XX:+UseG1GC"],
            // "vmArgs": ["-Xlog:gc+heap=debug:log/gc-%t.log:time,level,tags","-XX:+UseG1GC"],
            // "vmArgs": ["-Xloggc:log/gc.log","-XX:+UseShenandoahGC"],
            "mainClass": "com.example.ReferenceCount",
            "projectName": "demo"
        },
        {
            "type": "java",
            "name": "Main",
            "request": "launch",
            "mainClass": "com.example.Main",
            "projectName": "demo"
        },
        {
            "type": "java",
            "name": "Current File",
            "request": "launch",
            "mainClass": "${file}"
        }
    ]
}